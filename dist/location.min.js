import _typeof from 'babel-runtime/helpers/typeof';
import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';

// JSONP.js
var JSONP = function JSONP() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var data = config.data,
      url = config.url,
      callback = config.callback;
  // 拼接请求Url

  if (!url) throw new Error('url is required!');
  var name = 'id_' + new Date().getTime() + '_' + Math.random().toString().substr(2);
  var srcUrl = getSrcUrl(url, {
    data: data,
    callback: name
  });
  // 插入Script标签
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.src = srcUrl;
  script.id = name;
  // CallBack 放到 window 对象，调用后销毁
  window[name] = function (json) {
    // 执行这个函数后，要销毁这个函数
    window[name] = undefined;
    // 获取这个script的元素
    var elem = document.getElementById(name);
    // 删除head里面插入的script，这三步都是为了不影响污染整个DOM啊
    removeElem(elem);
    // 执行传入的的函数
    callback && typeof callback === 'function' && callback(json);
  };
  var head = document.getElementsByTagName('head');
  if (head && head[0]) {
    head[0].appendChild(script);
  }
};
var getSrcUrl = function getSrcUrl(url, _ref) {
  var data = _ref.data,
      callback = _ref.callback;

  var _url = url + (url.indexOf('?') === -1 ? '?' : '&');
  var ret = '';
  if (typeof data === 'string') {
    ret = data;
  } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
    for (var key in data) {
      ret += '&' + key + '=' + encodeURIComponent(data[key]);
    }
    ret += '&callback=' + callback;
  }
  ret = ret.substr(1);
  return _url + ret;
};
var removeElem = function removeElem(elem) {
  var parent = elem.parentNode;
  if (parent && parent.nodeType !== 11) {
    parent.removeChild(elem);
  }
};

function getCookie(name) {
  var reg = new RegExp('(^| )' + name + '=([^;]*)(;|$)');
  var arr = document.cookie.match(reg);
  if (arr) {
    return unescape(arr[2]);
  } else {
    return null;
  }
}
function setCookieDomain(cName, value, maxAge) {
  document.cookie = cName + '=' + escape(value) + (maxAge === null ? '' : ';max-age=' + maxAge) + ';path=/;domain=leoao.com';
}

var Location = function () {
  function Location(config) {
    var _this = this;

    _classCallCheck(this, Location);

    this.init(config || {});
    if (this.type === 'amap') {
      this.loadAMap().then(function () {
        _this.amapLoaded = true;
        _this.initAMap();
        _this.installGeoLocation();
      });
    }
  }

  _createClass(Location, [{
    key: 'init',
    value: function init(config) {
      var _this2 = this;

      this.map = null;
      this.breakReTry = typeof config.breakReTry === 'number' ? config.breakReTry : 0;
      this.needRefresh = Boolean(config.needRefresh);
      this.geolocation = null;
      this.amapLoaded = false;
      this.success = false;
      this.defaultPosition = {
        cityId: 2,
        cityName: '北京市'
      };
      this.getLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var fitCity;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!_this2.amapLoaded && _this2.type === 'amap')) {
                  _context.next = 3;
                  break;
                }

                _context.next = 3;
                return new Promise(function (resolve, reject) {
                  var timer = setInterval(function () {
                    if (_this2.amapLoaded) {
                      clearInterval(timer);
                      timer = null;
                      resolve(true);
                    }
                  }, 100);
                });

              case 3:
                if (_this2.needRefresh) {
                  _context.next = 12;
                  break;
                }

                fitCity = JSON.parse(getCookie('fit-city') || '{}');

                if (!fitCity.success) {
                  _context.next = 12;
                  break;
                }

                _this2.success = true;
                _this2.cityId = fitCity.id;
                _this2.cityName = fitCity.name;
                _this2.lng = Number(getCookie('fit-lng')) || null;
                _this2.lat = Number(getCookie('fit-lat')) || null;
                return _context.abrupt('return', _this2);

              case 12:
                return _context.abrupt('return', _this2._getLocation());

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }));
      this.type = config.type || '';
      if (!!window.navigator.userAgent.match('LEFIT')) {
        this.type = 'app';
      } else if (window.navigator.userAgent.toLowerCase().indexOf('micromessenger') > -1) {
        this.type = 'wechat';
      } else {
        this.type = 'amap';
      }
    }
  }, {
    key: '_getLocation',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var resAMap, resWeChat, resApp;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.t0 = this.type;
                _context2.next = _context2.t0 === 'amap' ? 4 : _context2.t0 === 'wechat' ? 13 : _context2.t0 === 'app' ? 21 : 28;
                break;

              case 4:
                _context2.next = 6;
                return this.amapLocation();

              case 6:
                resAMap = _context2.sent;

                this.address = resAMap.formattedAddress;
                this.lng = Number(resAMap.position.lng);
                this.lat = Number(resAMap.position.lat);
                _context2.next = 12;
                return this.getFitCity([this.lng, this.lat]);

              case 12:
                return _context2.abrupt('break', 28);

              case 13:
                _context2.next = 15;
                return this.wechatLocation();

              case 15:
                resWeChat = _context2.sent;

                this.lng = Number(resWeChat.longitude);
                this.lat = Number(resWeChat.latitude);
                _context2.next = 20;
                return Promise.all([this.getFitCity([this.lng, this.lat]), this.location2AddressQQ(this.lng, this.lat)]);

              case 20:
                return _context2.abrupt('break', 28);

              case 21:
                _context2.next = 23;
                return this.appLoacation();

              case 23:
                resApp = _context2.sent;

                this.lng = Number(resApp.longitude);
                this.lat = Number(resApp.latitude);
                _context2.next = 28;
                return this.getFitCity([this.lng, this.lat]);

              case 28:
                this.success = true;
                setCookieDomain('fit-city', JSON.stringify({
                  id: this.cityId,
                  name: this.cityName,
                  success: true
                }), 600);
                setCookieDomain('fit-lat', this.lat, 600);
                setCookieDomain('fit-lng', this.lng, 600);
                return _context2.abrupt('return', this);

              case 35:
                _context2.prev = 35;
                _context2.t1 = _context2['catch'](0);

                console.log('_getLocation执行错误' + _context2.t1);
                this.success = false;

                if (!(this.breakReTry > 0)) {
                  _context2.next = 45;
                  break;
                }

                console.log('重试定位...', this.breakReTry);
                this.breakReTry--;
                return _context2.abrupt('return', this._getLocation());

              case 45:
                return _context2.abrupt('return', this);

              case 46:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 35]]);
      }));

      function _getLocation() {
        return _ref2.apply(this, arguments);
      }

      return _getLocation;
    }()
  }, {
    key: 'getFitCity',
    value: function getFitCity(location) {
      var _this3 = this;

      // 获取乐刻场地城市
      return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/lens/conduct/h5/api/v1/lapis?lk-package=public_platform.ground_sys.region&lk-class=GET_REGEO');
        xhr.setRequestHeader('content-type', 'application/json');
        xhr.send(JSON.stringify({
          location: location[0] + ',' + location[1]
        }));
        xhr.onreadystatechange = function () {
          if (xhr.status === 200) {
            if (xhr.readyState === 4) {
              var res = JSON.parse(xhr.responseText);
              if (res.code === 0) {
                _this3.cityName = res.data.regeo.city;
                _this3.cityId = res.data.regeo.city_id, _this3.province = res.data.regeo.province;
                _this3.provinceId = res.data.regeo.province_id;
                _this3.isOpenCity = res.data.regeo.is_open_city;
                resolve(true);
              } else {
                reject(false);
              }
            }
          } else {
            reject(false);
          }
        };
      });
    }
  }, {
    key: 'amapLocation',
    value: function amapLocation() {
      var _this4 = this;

      // 高德地图定位
      return new Promise(function (resolve, reject) {
        _this4.geolocation.getCurrentPosition(function (status, res) {
          if (status === 'complete') {
            resolve(res);
          } else {
            // localhost可以 ip不能绕过
            console.warn(status, res);
            console.log('手动提示:由于Chrome、IOS10等已不再支持非安全域的浏览器定位请求，为保证定位成功率和精度，请尽快升级您的站点到HTTPS。 ');
            reject();
          }
        });
      });
    }
  }, {
    key: 'wechatLocation',
    value: function wechatLocation() {
      // 微信定位
      return new Promise(function (resolve, reject) {
        if (!window.wx) {
          reject('没有找到window.wx!');
        } else {
          window.wx.getLocation({
            type: 'gcj02', // 默认为wgs84的gps坐标，如果要返回直接给openLocation用的火星坐标，可传入'gcj02'
            success: function success(res) {
              // var latitude = res.latitude // 纬度，浮点数，范围为90 ~ -90
              // var longitude = res.longitude // 经度，浮点数，范围为180 ~ -180。
              // var speed = res.speed // 速度，以米/每秒计
              // var accuracy = res.accuracy // 位置精度
              resolve(res);
            }
          });
        }
      });
    }
  }, {
    key: 'appLoacation',
    value: function appLoacation() {
      var _this5 = this;

      // 乐刻app定位
      return new Promise(function (resolve, reject) {
        window.LeFitWebViewJavascriptBridge && window.LeFitWebViewJavascriptBridge.callHandler('getLocation', {
          needRefresh: true
        }, function (result) {
          _this5.address = result.address;
          // this.lat = result.latitude
          // this.lng = result.longitude
          _this5.selectCityId = result.selectCityId;
          _this5.selectCityName = result.selectCityName;
          // this.cityName = result.city
          // this.province = result.province
          resolve(result);
        });
      });
    }
  }, {
    key: 'location2AddressAMap',
    value: function location2AddressAMap(cityName, location) {
      var _this6 = this;

      // 根据经纬度获取地址名称 (高德插件)
      this.installGeocoder(cityName);
      return new Promise(function (resolve, reject) {
        _this6.geocoder.getAddress(location, function (status, result) {
          if (status === 'complete' && result.info === 'OK') {
            _this6.address = result.regeocode && result.regeocode.formattedAddress;
            resolve(true);
          } else {
            reject(false);
          }
        });
      });
    }
  }, {
    key: 'location2AddressQQ',
    value: function location2AddressQQ(lng, lat) {
      var _this7 = this;

      // 根据经纬度获取地址名称 (腾讯接口)
      return new Promise(function (resolve, reject) {
        JSONP({
          url: 'https://apis.map.qq.com/ws/geocoder/v1/',
          data: {
            location: lat + ',' + lng,
            key: 'OD5BZ-OBFK6-BWUSA-MWJO6-XCXF7-5AFIV',
            get_poi: 0,
            poi_options: 'policy=1',
            output: 'jsonp'
          },
          callback: function callback(data) {
            if (data.status === 0) {
              _this7.address = data.result.address;
              resolve(true);
            } else {
              reject(false);
            }
          }
        });
      });
    }
  }, {
    key: 'loadAMap',
    value: function loadAMap() {
      return new Promise(function (resolve, reject) {
        if (window.AMap && window.AMap.Map) {
          resolve(true);
        } else {
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.async = true;
          script.defer = true;
          script.src = 'https://webapi.amap.com/maps?v=1.3&key=fc4920b8e2e0c77f381607444389d475';
          document.body.appendChild(script);
          var timer = setInterval(function () {
            if (window.AMap && window.AMap.Map) {
              clearInterval(timer);
              timer = null;
              resolve(true);
            }
          }, 100);
        }
      });
    }
  }, {
    key: 'initAMap',
    value: function initAMap() {
      this.map = new AMap.Map(document.createElement('div'), {
        resizeEnable: true,
        zoom: 11,
        center: [116.397428, 39.90923]
      });
    }
  }, {
    key: 'installGeoLocation',
    value: function installGeoLocation() {
      var _this8 = this;

      this.map.plugin('AMap.Geolocation', function () {
        _this8.geolocation = new AMap.Geolocation({
          enableHighAccuracy: true, // 是否使用高精度定位，默认:true
          timeout: 10000, // 超过10秒后停止定位，默认：无穷大
          noGeoLocation: 0, // 0: 可以使用浏览器定位 1: 手机设备禁止使用浏览器定位 2: PC上禁止使用浏览器定位 3: 所有终端禁止使用浏览器定位
          noIpLocate: 0, //是否禁止使用IP定位，默认值为0，可选值0-3 0: 可以使用IP定位 1: 手机设备禁止使用IP定位 2: PC上禁止使用IP定位 3: 所有终端禁止使用IP定位
          GeoLocationFirst: true, // 默认为false，设置为true的时候可以调整PC端为优先使用浏览器定位，失败后使用IP定位
          convert: true, // 是否使用坐标偏移，取值true:为高德地图坐标，取值false:为浏览器定位坐标
          extensions: 'base'
        });
      });
    }
  }, {
    key: 'installGeocoder',
    value: function installGeocoder(cityName) {
      var _this9 = this;

      this.map.plugin('AMap.Geocoder', function () {
        _this9.geocoder = new AMap.Geocoder({
          city: cityName || '全国', // 可选值：城市名（中文或中文全拼）、citycode、adcode；
          extensions: 'base'
        });
      });
    }
  }]);

  return Location;
}();

// 使用注意:
// 1 手动引入jsbriage
// 2 ios在网络代理的情况下会出现获取定位失败

export default Location;
