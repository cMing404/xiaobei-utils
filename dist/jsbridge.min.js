import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';

var loadJsBridge = (function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(loadedCallback) {
    var setupWebViewJavascriptBridge = function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(callback) {
        var WVJBIframe;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!window.LeFitWebViewJavascriptBridge) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt('return', callback(LeFitWebViewJavascriptBridge));

              case 2:
                if (!window.WVJBCallbacks) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt('return', window.WVJBCallbacks.push(callback));

              case 4:
                window.WVJBCallbacks = [callback];
                WVJBIframe = document.createElement('iframe');

                WVJBIframe.style.display = 'none';
                WVJBIframe.src = 'lefit://__BRIDGE_LOADED__';
                document.documentElement.appendChild(WVJBIframe);
                _context.next = 11;
                return new Promise(function (resolve, reject) {
                  setTimeout(function () {
                    document.documentElement.removeChild(WVJBIframe);resolve();
                  }, 0);
                });

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function setupWebViewJavascriptBridge(_x2) {
        return _ref2.apply(this, arguments);
      };
    }();

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(!/LEFIT/.test(window.navigator.userAgent) || window.LeFitWebViewJavascriptBridge)) {
              _context2.next = 3;
              break;
            }

            loadedCallback && loadedCallback();
            return _context2.abrupt('return', true);

          case 3:
            _context2.next = 5;
            return setupWebViewJavascriptBridge(function (bridge) {});

          case 5:
            _context2.next = 7;
            return new Promise(function (resolve, reject) {
              var callback = function callback(bridge) {
                bridge.init(function (message, responseCallback) {});
              };
              if (window.LeFitWebViewJavascriptBridge) {
                callback(LeFitWebViewJavascriptBridge);
                resolve();
              } else {
                document.addEventListener('LeFitWebViewJavascriptBridgeReady', function () {
                  callback(LeFitWebViewJavascriptBridge);
                  resolve();
                }, false);
              }
            });

          case 7:
            // alert(JSON.stringify(window.LeFitWebViewJavascriptBridge))
            loadedCallback && loadedCallback();
            return _context2.abrupt('return', true);

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

var index = {
  install: function install(Vue) {

    var callHandler = function callHandler() {
      for (var _len = arguments.length, arg = Array(_len), _key = 0; _key < _len; _key++) {
        arg[_key] = arguments[_key];
      }

      loadJsBridge().then(function () {
        var _console;

        window.LeFitWebViewJavascriptBridge && window.LeFitWebViewJavascriptBridge.callHandler(arg);
        (_console = console).log.apply(_console, ['jsbridge 执行的参数:\n'].concat(arg));
      });
    };

    Object.defineProperty(Vue.prototype, '$JB', {
      get: function get() {
        return {
          callHandler: callHandler,
          call: callHandler
        };
      }
    });
  }
};

export default index;
