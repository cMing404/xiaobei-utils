import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import wx from 'weixin-js-sdk';

function isWeChat() {
  return window.navigator.userAgent.toLowerCase().indexOf('micromessenger') > -1;
}

var loadWx = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var res;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return requestJsbill();

          case 2:
            res = _context.sent;

            wx.config({
              debug: false,
              appId: res.data.appId,
              timestamp: res.data.timestamp,
              nonceStr: res.data.nonceStr,
              signature: res.data.signature,
              jsApiList: ['checkJsApi', 'openLocation', 'getLocation', 'onMenuShareTimeline', 'onMenuShareAppMessage', 'hideMenuItems', 'uploadImage', 'chooseImage', 'scanQRCode', 'chooseWXPay']
            });
            _context.next = 6;
            return new Promise(function (resolve, reject) {
              wx.ready(function () {
                return resolve();
              });
              wx.error(function () {
                return reject();
              });
            });

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function loadWx() {
    return _ref2.apply(this, arguments);
  };
}();
var cbList = [];
var loaded = false;
var firstEntry = true;
var _wx = new Proxy(wx, {
  get: function get(target, name) {
    if (!isWeChat()) {
      return function () {
        console.log('当前不是微信环境 跳过jsdk配置');
      };
    } else if (loaded && name in target) {
      return wx[name];
    } else {
      return function () {
        for (var _len = arguments.length, arg = Array(_len), _key = 0; _key < _len; _key++) {
          arg[_key] = arguments[_key];
        }

        if (!firstEntry) {
          cbList.push({ name: name, arg: arg });
        } else {
          firstEntry = false;
          loadWx().then(function (res) {
            loaded = true;
            wx[name].apply(wx, arg);
            if (cbList.length) {
              cbList.forEach(function (_ref) {
                var name = _ref.name,
                    arg = _ref.arg;

                arg = arg || {};
                wx[name].apply(wx, _toConsumableArray(arg));
              });
              cbList = [];
            }
          }).catch(function (err) {
            loaded = true;
            console.log(err);
          });
        }
      };
    }
  }
});
var index = {
  install: function install(Vue) {
    Object.defineProperty(Vue.prototype, '$wx', {
      value: _wx
    });
    Object.defineProperty(window, 'wx', {
      value: _wx
    });
  }
};

function requestJsbill() {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '/lens/fit/h5/api/v1/wechat/jsbill?type=1&url=' + encodeURIComponent(window.location.href));
    xhr.send(null);
    xhr.onreadystatechange = function () {
      if (xhr.status === 200) {
        if (xhr.readyState === 4) {
          resolve(JSON.parse(xhr.responseText));
        }
      }
    };
  });
}

export default index;
