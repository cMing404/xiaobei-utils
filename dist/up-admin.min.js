import _extends from 'babel-runtime/helpers/extends';
import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';

/*
  建议全局只定义一个子例 这样方便管理uptoken的请求以及时效性
  食用方法:
  1.formdata
  var uploader = new UpAdmin()
  uploader.upload(event.target.files[0])
  2.sdk
  var uploader = new UpAdmin(Qiniu, config)
  uploader.upload(file)
  uploader.onuploadproress = function (percent) {
    console.log('上传进度:' + percent)
  }
  详情看以下函数入参注解
*/
var UpAdmin = function () {
  /**
   * Creates an instance of UpAdmin.
   * @param {any} Qiniu 七牛sdk
   * @param {any} config 上传配置 会自动merge默认配置
   * @memberof UpAdmin
   */
  function UpAdmin(Qiniu, config) {
    _classCallCheck(this, UpAdmin);

    Object.defineProperty(this, 'uptoken', {
      enumerable: true,
      writable: true,
      value: ''
    });
    Object.defineProperty(this, 'formData', {
      enumerable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(this, 'file', {
      enumerable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(this, 'tagTime', {
      enumerable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, 'config', {
      enumerable: true,
      writable: true,
      value: {}
    });

    if (Qiniu) {
      this.config = Object.assign(defaultConfig, config || {});
      var browse_button = document.createElement('div');
      var container = document.createElement('div');
      container.style.display = 'none';
      container.appendChild(browse_button);
      document.body.appendChild(container);
      browse_button.id = 'upBtn' + Math.random().toString(36).slice(2), this.config.browse_button = browse_button.id;
      this.qiniu = new Qiniu.uploader(this.config);
    }
  }
  /**
   * 
   * 
   * @param {any} file 可传base64或file文件
   * @returns 
   * @memberof UpAdmin
   */


  _createClass(UpAdmin, [{
    key: 'upload',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, prefix) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (typeof file === 'string') {
                  this.file = this.convertBase64UrlToBlob(file);
                } else {
                  this.file = file;
                }

                if (!this.qiniu) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt('return', this.sdkUpload(prefix));

              case 5:
                return _context.abrupt('return', this.formDataUpload(prefix));

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function upload(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return upload;
    }()
  }, {
    key: 'sdkUpload',
    value: function sdkUpload() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          _this.qiniu.addFile(_this.file);
          _this.qiniu.start();
          _this.qiniu.bind('FileUploaded', function (up, file, _ref2) {
            var response = _ref2.response;

            var info = JSON.parse(response);
            resolve(info);
            _this.reset();
          });
          _this.qiniu.bind('UploadProgress', function (up, file) {
            _this.onuploadproress(file.percent);
          });
        }, 100);
      });
    }
  }, {
    key: 'formDataUpload',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this2 = this;

        var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var name;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getToken();

              case 2:
                this.formData = new FormData();
                this.formData.append('file', this.file);
                this.formData.append('token', this.uptoken);
                name = this.takeKey(this.file.name, prefix);
                // let name = this.file.name ? this.file.name.replace(/\.\S*$/, v => +new Date() + v): Math.random().toString(36).slice(2)

                this.formData.append('key', prefix + name);
                return _context2.abrupt('return', new Promise(function (resolve, reject) {
                  var xhr = new XMLHttpRequest();
                  xhr.open('POST', 'https://up.qbox.me/', true);
                  xhr.send(_this2.formData);
                  xhr.onreadystatechange = function () {
                    if (xhr.status === 200) {
                      if (xhr.readyState === 4) {
                        resolve(_extends({}, JSON.parse(xhr.responseText), {
                          origin: 'https://cdn.leoao.com/'
                        }));
                        _this2.reset();
                      }
                    }
                  };
                }));

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function formDataUpload() {
        return _ref3.apply(this, arguments);
      }

      return formDataUpload;
    }()
  }, {
    key: 'reset',
    value: function reset() {
      this.file = null;
      this.formData = null;
      if (this.qiniu) {
        this.qiniu = new Qiniu.uploader(this.config);
      }
    }
    /**
     * 
     * 
     * @param {any} urlData 需要转换的base64字符串
     * @returns 
     * @memberof UpAdmin
     */

  }, {
    key: 'convertBase64UrlToBlob',
    value: function convertBase64UrlToBlob(urlData) {
      var bytes = window.atob(urlData.split(',')[1]); // 去掉url的头，并转换为byte
      // 处理异常,将ascii码小于0的转换为大于0
      var ab = new ArrayBuffer(bytes.length);
      var ia = new Uint8Array(ab);
      for (var i = 0; i < bytes.length; i++) {
        ia[i] = bytes.charCodeAt(i);
      }
      return new Blob([ab], { type: 'image/png' });
    }
  }, {
    key: 'takeKey',
    value: function takeKey(fileName, prefix) {
      prefix = prefix || 'up-admin';
      return fileName ? prefix + fileName.replace(/\.\S*$/, function (v) {
        return +new Date() + v;
      }) : prefix + '-' + Math.random().toString(36).slice(2);
    }
  }, {
    key: 'getToken',
    value: function getToken() {
      var _this3 = this;
      return new Promise(function (resolve, reject) {
        if (_this3.uptoken && new Date().valueOf() - _this3.tagTime < 360000) {
          resolve(_this3.uptoken);
          return;
        }
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '/lens/fit/h5/api/v1/qiniu/uptoken?time=' + +new Date(), true);
        xhr.send();
        xhr.onreadystatechange = function () {
          if (xhr.status === 200) {
            if (xhr.readyState === 4) {
              var res = JSON.parse(xhr.responseText);
              _this3.uptoken = res.uptoken;
              _this3.tagTime = new Date().valueOf();
              resolve(_this3.uptoken);
            }
          } else {
            reject(xhr);
          }
        };
      });
    }
  }]);

  return UpAdmin;
}();

var defaultConfig = {
  disable_statistics_report: false,
  runtimes: 'html5,html4,flash',
  // browse_button: browse_button.id,
  // uptoken: this.uptoken,
  uptoken_url: '/lens/fit/h5/api/v1/qiniu/uptoken?time=' + +new Date(),
  get_new_uptoken: false,
  unique_names: false,
  save_key: false,
  domain: 'cdn.leoao.com',
  chunk_size: '0mb', // 安卓不能分片 ios可以分片  结果视频砍掉了 这个东西以后再优化
  max_retries: 3,
  dragdrop: false,
  auto_start: true,
  multi_selection: false, // 是否可多选 ios下不可为true 否则无法上传
  init: {
    BeforeUpload: function BeforeUpload(up, file) {},
    UploadProgress: function UploadProgress(up, file) {},
    FileUploaded: function FileUploaded(up, file, info) {},
    Error: function Error(up, err, errTip) {},
    Key: function Key(up, file) {
      return this.takeKey(file.name);
    }
  }
};

export default UpAdmin;
