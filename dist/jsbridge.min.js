import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';

function isApp() {
  return !!window.navigator.userAgent.match('LEFIT');
}

var cbList = [];
var firstEntry = true;

var loadJsBridge = (function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
    var setupWebViewJavascriptBridge;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (firstEntry) {
              _context2.next = 4;
              break;
            }

            cbList.push(callback);
            _context2.next = 16;
            break;

          case 4:
            setupWebViewJavascriptBridge = function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(callback) {
                var WVJBIframe;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!window.LeFitWebViewJavascriptBridge) {
                          _context.next = 2;
                          break;
                        }

                        return _context.abrupt('return', callback(LeFitWebViewJavascriptBridge));

                      case 2:
                        if (!window.WVJBCallbacks) {
                          _context.next = 4;
                          break;
                        }

                        return _context.abrupt('return', window.WVJBCallbacks.push(callback));

                      case 4:
                        window.WVJBCallbacks = [callback];
                        WVJBIframe = document.createElement('iframe');

                        WVJBIframe.style.display = 'none';
                        WVJBIframe.src = 'lefit://__BRIDGE_LOADED__';
                        document.documentElement.appendChild(WVJBIframe);
                        _context.next = 11;
                        return new Promise(function (resolve, reject) {
                          setTimeout(function () {
                            document.documentElement.removeChild(WVJBIframe);resolve();
                          }, 0);
                        });

                      case 11:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              }));

              return function setupWebViewJavascriptBridge(_x2) {
                return _ref2.apply(this, arguments);
              };
            }();

            firstEntry = false;
            // 封装的加载方法

            if (isApp()) {
              _context2.next = 9;
              break;
            }

            callback();
            return _context2.abrupt('return', true);

          case 9:
            _context2.next = 11;
            return setupWebViewJavascriptBridge(function (bridge) {});

          case 11:
            _context2.next = 13;
            return new Promise(function (resolve, reject) {
              var callback = function callback(bridge) {
                bridge.init(function (message, responseCallback) {});
              };
              if (window.LeFitWebViewJavascriptBridge) {
                callback(LeFitWebViewJavascriptBridge);
                resolve();
              } else {
                document.addEventListener('LeFitWebViewJavascriptBridgeReady', function () {
                  callback(LeFitWebViewJavascriptBridge);
                  resolve();
                }, false);
              }
            });

          case 13:
            callback();
            if (cbList.length) {
              cbList.forEach(function (cb) {
                return cb();
              });
              cbList = [];
            }

          case 16:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function () {
    return _ref.apply(this, arguments);
  };
})();

var funHander = function funHander(operate, name) {
  for (var _len = arguments.length, arg = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    arg[_key - 2] = arguments[_key];
  }

  if (!isApp()) {
    console.log('当前不是app环境 无法执行操作');
  } else if (window.LeFitWebViewJavascriptBridge) {
    var _window$LeFitWebViewJ;

    (_window$LeFitWebViewJ = window.LeFitWebViewJavascriptBridge)[operate].apply(_window$LeFitWebViewJ, [name].concat(arg));
  } else {
    loadJsBridge(function () {
      var _window$LeFitWebViewJ2;

      (_window$LeFitWebViewJ2 = window.LeFitWebViewJavascriptBridge)[operate].apply(_window$LeFitWebViewJ2, [name].concat(arg));
    });
  }
};

var index = {
  install: function install(Vue) {
    Object.defineProperty(Vue.prototype, '$native', {
      get: function get() {
        return {
          callHandler: funHander.bind(null, 'callHandler'),
          call: funHander.bind(null, 'callHandler'),
          registerHandler: funHander.bind(null, 'registerHandler'),
          register: funHander.bind(null, 'registerHandler'),
          addEventListener: funHander.bind(null, 'registerHandler'),
          addEvent: funHander.bind(null, 'registerHandler')
        };
      }
    });
    loadJsBridge();
  },

  init: loadJsBridge
};

export default index;
