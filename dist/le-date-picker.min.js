import lePicker from 'le-ui/src/components/picker';
import leMoment from 'lefit-moment';
import 'le-ui/dist/styles/leui.css';

var leDatePicker = {
  render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('le-picker', { attrs: { "slots": _vm.slots, "value-key": "name", "show": _vm.show, "title": "时间选择", "submit": _vm.submit, "cancel": _vm.cancel }, on: { "change": _vm.change } });
  },
  staticRenderFns: [],
  components: {
    lePicker: lePicker
  },
  name: 'leDatePicker',
  data: function data() {
    return {
      slots: [],
      YYYY: [],
      MM: [],
      DD: [],
      HH: [],
      mm: [],
      ss: [],
      rules: ['YYYY', 'MM', 'DD', 'HH', 'mm', 'ss'],
      _format: '',
      _divi: {},
      initTimeLemoment: {},
      date31: []
    };
  },

  props: {
    format: {
      type: String,
      default: function _default() {
        return 'YYYY-MM-DD HH:mm';
      }
    },
    initTime: {
      type: [Number, String, Object, Date],
      default: function _default() {
        return new Date();
      }
    },
    startTime: {
      type: [Number, String, Object, Date],
      default: function _default() {
        return +new Date() - 315360000000;
      }
    },
    startYear: {
      type: [Number, String],
      default: ''
    },
    endTime: {
      type: [Number, String, Object, Date],
      default: function _default() {
        return +new Date() + 315360000000;
      }
    },
    endYear: {
      type: [Number, String],
      default: ''
    },
    divi: Object, // 尺度分割
    show: {
      type: Boolean,
      default: false
    }
  },
  watch: {
    show: function show(val) {
      if (val) {
        this.initTimeLemoment = leMoment(this.initTime);
        this.setIndex();
      }
    }
  },
  methods: {
    initSlots: function initSlots() {
      var _this = this;

      this._divi = Object.assign({
        YYYY: 1,
        MM: 1,
        DD: 1,
        HH: 1,
        mm: 1,
        ss: 1
      }, this.divi);
      var startTime = this.startYear ? leMoment({ year: this.startYear }).get('year') : leMoment(this.startTime).get('year');
      var endTime = this.endYear ? leMoment({ year: this.endYear }).get('year') : leMoment(this.endTime).get('year');
      this.YYYY = this.createSlot(startTime, endTime, this._divi.YYYY);
      this.MM = this.createSlot(1, 12, this._divi.MM);
      this.DD = this.createSlot(1, 31, this._divi.DD);
      this.HH = this.createSlot(0, 23, this._divi.HH);
      this.mm = this.createSlot(0, 59, this._divi.mm);
      this.ss = this.createSlot(0, 59, this._divi.ss);
      this.date31 = this.createArr(1, 31, 1);
      this._format = this.format;
      this.rules.forEach(function (key) {
        var regexp = new RegExp('^' + key);
        var divRegexp = /^[/-\s:年月日时分秒]*/;
        if (regexp.test(_this._format)) {
          _this.slots.push(Object.assign(_this[key], { key: key }));
          _this._format = _this._format.replace(regexp, '');
        }
        var result = _this._format.match(divRegexp);
        if (result) {
          _this.slots.push({
            divider: true,
            content: result[0]
          });
          _this._format = _this._format.replace(divRegexp, '');
        }
      });
    },
    setIndex: function setIndex() {
      var compareTimeData = {
        YYYY: this.initTimeLemoment.get('year'),
        MM: this.initTimeLemoment.get('month') + 1,
        DD: this.initTimeLemoment.get('date'),
        HH: this.initTimeLemoment.get('hour'),
        mm: this.initTimeLemoment.get('minute')
      };
      for (var key in compareTimeData) {
        for (var i = 0; i < this[key].values.length; i++) {
          if (this[key].values[i].value === compareTimeData[key]) {
            this[key].defaultIndex = i;
            break;
          }
        }
      }
    },
    createSlot: function createSlot() {
      return {
        flex: 1,
        values: this.createArr.apply(this, arguments),
        textAlign: 'center'
      };
    },
    createArr: function createArr(start, end, divi) {
      var arr = [];
      for (var i = start; i <= end; i += divi) {
        arr.push({
          name: i < 10 ? '0' + i : '' + i,
          value: i
        });
      }
      return arr;
    },
    arr2time: function arr2time(arr) {
      var _slots = this.slots.filter(function (v) {
        return v.key;
      });
      var timeData = {};
      for (var i = 0; i < arr.length; i++) {
        if (_slots[i].key === 'MM') {
          timeData[_slots[i].key] = arr[i].value - 1;
        } else {
          timeData[_slots[i].key] = arr[i].value;
        }
      }
      return timeData;
    },
    submit: function submit(arr) {
      var timeObj = this.arr2time(arr);
      this.$emit('confirm', this.translate(timeObj));
    },
    translate: function translate(timeObj) {
      var _timeObj = {};
      var translate = {
        YYYY: 'year',
        MM: 'month',
        DD: 'date',
        HH: 'hour',
        mm: 'minute',
        ss: 'second'
      };
      for (var key in timeObj) {
        _timeObj[translate[key]] = timeObj[key];
      }
      return _timeObj;
    },
    cancel: function cancel() {
      this.$emit('cancel');
    },
    change: function change(vm, arr) {
      var timeObj = this.arr2time(arr);
      if (timeObj.MM !== undefined) {
        this.takeTime(vm, timeObj);
      }
      this.$emit('change', this.translate(timeObj));
    },
    takeTime: function takeTime(vm, time) {
      var slotValues = [];
      slotValues = this.date31.slice(0, this.takeDateLength(time));
      var index = this.slots.findIndex(function (v) {
        return v.key === 'DD';
      });
      if (index !== -1) {
        this.slots[index].values = slotValues;
      }
    },
    takeDateLength: function takeDateLength(time) {
      var month = time.MM + 1;
      var year = time.YYYY || new Date().getFullYear();
      if ([1, 3, 5, 7, 8, 10, 12].indexOf(month) > -1) {
        return 31;
      } else if ([4, 6, 9, 11].indexOf(month) > -1) {
        return 30;
      } else if (month === 2) {
        if (this.isLeapYear(year)) {
          return 29;
        } else {
          return 28;
        }
      }
    },
    isLeapYear: function isLeapYear(year) {
      var cond1 = year % 4 === 0;
      var cond2 = year % 100 !== 0;
      var cond3 = year % 400 === 0;
      return cond1 && cond2 || cond3;
    }
  },
  created: function created() {
    this.initTimeLemoment = leMoment(this.initTime);
    this.initSlots();
    this.setIndex();
  }
};

var index = {
  install: function install(Vue) {
    Vue.component('le-date-picker', Vue.extend(leDatePicker));
  }
};

export default index;
