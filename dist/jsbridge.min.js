import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';

function isApp() {
  return !!window.navigator.userAgent.match('LEFIT');
}

var loadJsBridge = (function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(loadedCallback) {
    var setupWebViewJavascriptBridge = function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(callback) {
        var WVJBIframe;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!window.LeFitWebViewJavascriptBridge) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt('return', callback(LeFitWebViewJavascriptBridge));

              case 2:
                if (!window.WVJBCallbacks) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt('return', window.WVJBCallbacks.push(callback));

              case 4:
                window.WVJBCallbacks = [callback];
                WVJBIframe = document.createElement('iframe');

                WVJBIframe.style.display = 'none';
                WVJBIframe.src = 'lefit://__BRIDGE_LOADED__';
                document.documentElement.appendChild(WVJBIframe);
                _context.next = 11;
                return new Promise(function (resolve, reject) {
                  setTimeout(function () {
                    document.documentElement.removeChild(WVJBIframe);resolve();
                  }, 0);
                });

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function setupWebViewJavascriptBridge(_x2) {
        return _ref2.apply(this, arguments);
      };
    }();

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(!/LEFIT/.test(window.navigator.userAgent) || window.LeFitWebViewJavascriptBridge)) {
              _context2.next = 3;
              break;
            }

            loadedCallback && loadedCallback();
            return _context2.abrupt('return', true);

          case 3:
            _context2.next = 5;
            return setupWebViewJavascriptBridge(function (bridge) {});

          case 5:
            _context2.next = 7;
            return new Promise(function (resolve, reject) {
              var callback = function callback(bridge) {
                bridge.init(function (message, responseCallback) {});
              };
              if (window.LeFitWebViewJavascriptBridge) {
                callback(LeFitWebViewJavascriptBridge);
                resolve();
              } else {
                document.addEventListener('LeFitWebViewJavascriptBridgeReady', function () {
                  callback(LeFitWebViewJavascriptBridge);
                  resolve();
                }, false);
              }
            });

          case 7:
            // alert(JSON.stringify(window.LeFitWebViewJavascriptBridge))
            loadedCallback && loadedCallback();
            return _context2.abrupt('return', true);

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

var cbList = [];
var loaded = false;
var firstEntry = true;

var funHander = function funHander(operate, name) {
  for (var _len = arguments.length, arg = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    arg[_key - 2] = arguments[_key];
  }

  if (!isApp()) {
    console.log('当前不是app环境 无法执行操作');
  } else if (loaded && window.LeFitWebViewJavascriptBridge) {
    var _window$LeFitWebViewJ;

    (_window$LeFitWebViewJ = window.LeFitWebViewJavascriptBridge)[operate].apply(_window$LeFitWebViewJ, [name].concat(arg));
  } else {
    if (!firstEntry) {
      cbList.push({ name: name, arg: arg, operate: operate });
    } else {
      firstEntry = false;
      loadJsBridge().then(function (res) {
        var _window$LeFitWebViewJ2;

        loaded = true;
        (_window$LeFitWebViewJ2 = window.LeFitWebViewJavascriptBridge)[operate].apply(_window$LeFitWebViewJ2, [name].concat(arg));
        console.log(cbList);
        if (cbList.length) {
          cbList.forEach(function (_ref) {
            var _window$LeFitWebViewJ3;

            var operate = _ref.operate,
                name = _ref.name,
                arg = _ref.arg;

            (_window$LeFitWebViewJ3 = window.LeFitWebViewJavascriptBridge)[operate].apply(_window$LeFitWebViewJ3, [name].concat(_toConsumableArray(arg)));
          });
          cbList = [];
        }
      }).catch(function (err) {
        loaded = true;
        console.log(err);
      });
    }
  }
};

var index = {
  install: function install(Vue) {
    Object.defineProperty(Vue.prototype, '$native', {
      get: function get() {
        return {
          callHandler: funHander.bind(null, 'callHandler'),
          call: funHander.bind(null, 'callHandler'),
          registerHandler: funHander.bind(null, 'registerHandler'),
          register: funHander.bind(null, 'registerHandler'),
          addEventListener: funHander.bind(null, 'registerHandler'),
          addEvent: funHander.bind(null, 'registerHandler')
        };
      }
    });
  }
};

export default index;
